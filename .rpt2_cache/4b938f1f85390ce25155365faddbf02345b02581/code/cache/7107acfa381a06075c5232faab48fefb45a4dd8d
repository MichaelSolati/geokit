{"code":"/**\r\n * Get Base 32 symbol from decimal chunk (5 bit binary value).\r\n * @param value Decimal value of chunk (5 bit binary value).\r\n * @returns Base 32 value.\r\n */\r\nexport function base32(value) {\r\n    return '0123456789bcdefghjkmnpqrstuvwxyz'.charAt(value);\r\n}\r\n/**\r\n * Get decimal chunk (5 bit binary value) from Base 32 character.\r\n * @param value Base 32 character.\r\n * @returns Decimal value of chunk (5 bit binary value).\r\n */\r\nexport function decimalChunk(value) {\r\n    return '0123456789bcdefghjkmnpqrstuvwxyz'.indexOf(value.toLowerCase());\r\n}\r\n/**\r\n  * Determine if coordinate is greater than midle of range in a bit representation.\r\n  * @param point Coordinates.\r\n  * @param range Range of coordinates to check.\r\n  * @returns Number representation if point is greater than the middle of the range.\r\n  */\r\nexport function getBit(point, range) {\r\n    var middle = (range[0] + range[1]) / 2;\r\n    return (middle > point) ? 0 : 1;\r\n}\r\n/**\r\n * Get radians from degrees.\r\n * @param degrees Degrees.\r\n * @returns Radians.\r\n */\r\nexport function toRad(degrees) {\r\n    return (degrees * Math.PI / 180);\r\n}\r\n/**\r\n * Validates user inputted coordinates.\r\n * @param coordinates User inputted coordinates.\r\n * @returns Error.\r\n */\r\nexport function validateCoordinates(coordinates) {\r\n    var error = [];\r\n    if (coordinates.lat > 90) {\r\n        error.push('Your latitude is greater than 90째');\r\n    }\r\n    if (coordinates.lat < -90) {\r\n        error.push('Your latitude is less than -90째');\r\n    }\r\n    if (coordinates.lng > 180) {\r\n        error.push('Your longitude is greater than 180째');\r\n    }\r\n    if (coordinates.lng < -180) {\r\n        error.push('Your longitude is less than -180째');\r\n    }\r\n    if (error.length !== 0) {\r\n        return new Error(error.join(' '));\r\n    }\r\n}\r\n","dts":{"name":"/Users/michaelsolati/Documents/workspace/geokit/helpers.d.ts","text":"import { LatLngLiteral } from './interfaces';\r\n/**\r\n * Get Base 32 symbol from decimal chunk (5 bit binary value).\r\n * @param value Decimal value of chunk (5 bit binary value).\r\n * @returns Base 32 value.\r\n */\r\nexport declare function base32(value: number): string;\r\n/**\r\n * Get decimal chunk (5 bit binary value) from Base 32 character.\r\n * @param value Base 32 character.\r\n * @returns Decimal value of chunk (5 bit binary value).\r\n */\r\nexport declare function decimalChunk(value: string): number;\r\n/**\r\n  * Determine if coordinate is greater than midle of range in a bit representation.\r\n  * @param point Coordinates.\r\n  * @param range Range of coordinates to check.\r\n  * @returns Number representation if point is greater than the middle of the range.\r\n  */\r\nexport declare function getBit(point: number, range: number[]): number;\r\n/**\r\n * Get radians from degrees.\r\n * @param degrees Degrees.\r\n * @returns Radians.\r\n */\r\nexport declare function toRad(degrees: number): number;\r\n/**\r\n * Validates user inputted coordinates.\r\n * @param coordinates User inputted coordinates.\r\n * @returns Error.\r\n */\r\nexport declare function validateCoordinates(coordinates: LatLngLiteral): Error;\r\n"}}
